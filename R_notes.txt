getwd()			get working directory
dir()			list everyting in the directory
list.files()		show all files in a directory
read.csv()	
source(mycode.R)	load a R code into workspace
old.dir<-getwd()	can be used to go back to old directory
dir.create()		create a new directory
file.create()		create a new file
file.exists()		check if a file exists in a directory
		//check if a file exists before doing anything on it
file.info()		check the information of a file
file.rename()		rename a file
file.remove()		remove a file
file.copy()		copy a file and give it a new name
file.path()		return the relative path to a file
		//can be used to create file path independent of OS
		//eg. file.path("path1","path2")
unlink(directory, recursive=TRUE) //will remove a directory
		//history, unlink is the traditional unix command for 		//removing directories
setwd(old.dir)	//go back to the original directory
print(x)		print x


Sequences of numbers lecture:
seq(5,10,length=30)
seq(0,10,by=0.5)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)

rep(0,times=40)
rep(c(0,1,2),times=10)	repeat c(0,1,2) for 10 times
rep(c(0,1,2),each=10)	repeat each of c(0,1,2) 10 times





Logical and Character vectors lecture

my_name<-c(c("My","Name"),"Patrick")
paste(my_name,collapse="")
paste(1:3,c("X","Y","Z"),sep="")  
	result:  "1X" "2Y" "3Z"




Missing Values Lecture
my_data<-sample(c(y,z),100)
my_data==NA  is not the same with   is.na(my_data)






lapply and sapply lecture

When a returned list can not be simplified into a vector,
sapply will return the same thing with lapply







Five atomic object types:
	character
	numeric (real numbers)
	integer
	complex
	logical (true/false)
Vector: single object class
List: items can be from different classes
x <- 1L		explicitly say x is integer 1
Inf:	numeric, infinity
NaN:	undefined value (not a number)

Creating vectors:
x <- c(0.5, 0.6)
x <- c(T,F)
x <- c("a","b")
x <- 9:29

x <- c(TRUE, 2), x will be 1, 2
as will explicitly do the coercion
x <- 0:6
as.logical(x)
as.character(x)
x[1], x[2]

Creating lists
list can contain different types
x <- list(1,"a",TRUE,1+4i)
x[[1]], x[[2]]


Creating matrix
Matrices are constructed column-wise, so entries can be thought as starting in the "upper left" corner and running down the columns. 
m <- matrix(nrow=2,ncol=3)
m <- matrix(1:6,nrow=2,ncol=3)

cbind and rbind


Creating factors
factors are treated specially by lm and glm
x <- factor(c("y","n","o"))
table(x)

x <- factor(c("y","n","y"),levels=c("y","n"))
"y" will be the base level


NaN is also NA, but the converse is not true.
NA values have a class, so there is integer NA, character NA, etc. 

Creating Data Frames
read.table and read.csv will create data frames
can be converted to a matrix by calling data.matrix()

R objects can have names



read.table	read.csv
readLines
source
dget
load	loading saved work spaces


read large tables, play some tricks, like setting nrows to avoid memory overestimate, using first few to find col types and apply to the big dataset, or doing simple math of needed memory. 

dumping and dputing can preserve the metadata

y<- data.frame(a=1,b='a')
dput(y)
	structure(list(a = 1, b = structure(1L, .Label = 	"a", class = "factor")), .Names = c("a", 
	"b"), row.names = c(NA, -1L), class = "data.frame")
dput(y,file='y.R')
## this will save y to 'y.R' with all the metadata stored
new.y<-dget('y.R')

rm(x,y)  ## remove certain objects
x<-"foo"
y<-data.frame(a=1,b="c")
dump(c("x","y"),file="data.R")
rm(x,y)
source("data.R")
## then x and y can be used directly. 

connections
	con<- gzfile("word.gz","r")
	x<- readLines(con,10)

	con<- url("www.jhu.edu","r")
	x<- readLines(con)

subsetting, or getting elements from a vector/list/data frame
[] : 	returning the same class as the original
[[]]:	extract from a list or data frame, class may change
$:	extract from a list or data frame by name

Two types of index: numerical index and logical index

subsetting a list
x[1]: return the same element (the first element as a list)
x[[1]]: return all the elements of the first element
x$foo
x[["foo"]]
name<-"foo"
x[[name]] will work, but x$name will return nothing

subsetting a matrix
x[3,4] return the (3,4) element as a single variable
x[3,4,drop=FALSE] will return the (3,4) element as a 1by1 matrix

partial matching
	allowed with [[]] and $
x<-list(awward=1:5)
x$a will return the awward list
x[["a",exact=FALSE]] will also do the same

Subsetting: removing missing values
x<c(1,2,NaN,NA)
bad<-is.na(x)
x[!is.na(x)] will return only the valid values

Look at multiple objects
good<-complete.cases(x,y)   will return the indexes that both x and y have valid values

good<-complete.cases(airquality)
airquality[good,][1:6,] return all the good rows and get the first 6

Vectorized Operations
x<-matrix(1:4,2,2)
y<-matrix(rep(10,4),2,2)
x %*% y    this is true matrix muplication
x * y	   this is pairwise muplication

function value lazy evaluation, an argument is evaluated only when it is needed

Lexical Scoping
Freeway variables are not formal arguments and are not local variables. The scoping rules of a language determine how values are assigned to free variables. 